<?xml version="1.0" encoding="utf-8"?>
<!--

Actipro Syntax Language Definition (.langdef)
  For use with Actipro SyntaxEditor and related products.
  http://www.actiprosoftware.com

'Fun Basic' language created by Phillip Trelford.
  Phillip Trelford 2015

-->
<LanguageDefinition LanguageKey="FunBasic" LanguageDescription="My Language" Creator="Phillip Trelford" Copyright="Phillip Trelford 2015" xmlns="http://schemas.actiprosoftware.com/langdef/1.0">
	<!-- Classification types -->
	<LanguageDefinition.ClassificationTypes>
		<ClassificationType Key="Comment" DefaultStyle="#FF008000" />
		<ClassificationType Key="Delimiter" />
		<ClassificationType Key="Identifier" />
		<ClassificationType Key="Keyword" DefaultStyle="#FF0000FF" />
		<ClassificationType Key="Number" />
		<ClassificationType Key="Operator" />
		<ClassificationType Key="String" DefaultStyle="#FF800000" />
	</LanguageDefinition.ClassificationTypes>
	<!-- Lexer -->
	<LanguageDefinition.Lexer>
		<DynamicLexer>
			<!-- Default state -->
			<State Id="1" Key="Default">
				<State.ChildStates>
					<StateRef Key="PrimaryString" />
					<StateRef Key="SingleLineComment" />
				</State.ChildStates>
				<RegexPatternGroup TokenId="1" TokenKey="Whitespace" Pattern="{Whitespace}+" />
				<RegexPatternGroup TokenId="2" TokenKey="LineTerminator" Pattern="{LineTerminator}" />
				<ExplicitPatternGroup TokenId="3" TokenKey="OpenParenthesis" ClassificationTypeKey="Delimiter" Pattern="(" />
				<ExplicitPatternGroup TokenId="4" TokenKey="CloseParenthesis" ClassificationTypeKey="Delimiter" Pattern=")" />
				<ExplicitPatternGroup TokenId="5" TokenKey="OpenSquareBrace" ClassificationTypeKey="Delimiter" Pattern="[" />
				<ExplicitPatternGroup TokenId="6" TokenKey="CloseSquareBrace" ClassificationTypeKey="Delimiter" Pattern="]" />
				<ExplicitPatternGroup TokenId="7" TokenKey="Keyword" ClassificationTypeKey="Keyword" LookAheadPattern="{NonWord}|\z">
					<ExplicitPatterns><![CDATA[
						and case else elseif end endfor endfunction endif endselect endsub endwhile for function goto if or
						return select step sub then to while
					]]></ExplicitPatterns>
				</ExplicitPatternGroup>
				<RegexPatternGroup TokenId="8" TokenKey="Identifier" ClassificationTypeKey="Identifier" Pattern="(_ | {Alpha})({Word})*" />
				<ExplicitPatternGroup TokenId="9" TokenKey="Operator" ClassificationTypeKey="Operator">
					<ExplicitPatterns><![CDATA[
						* + - / <= <> < = >= >
					]]></ExplicitPatterns>
				</ExplicitPatternGroup>
				<RegexPatternGroup TokenId="10" TokenKey="RealNumber" ClassificationTypeKey="Number" Pattern="{Digit}* \. {Digit}+" LookAheadPattern="{NonWord}|\z" />
				<RegexPatternGroup TokenId="11" TokenKey="IntegerNumber" ClassificationTypeKey="Number" Pattern="{Digit}+" LookAheadPattern="{NonWord}|\z" />
			</State>
			<!-- PrimaryString state -->
			<State Id="2" Key="PrimaryString" DefaultTokenId="12" DefaultTokenKey="PrimaryStringText" DefaultClassificationTypeKey="String">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenId="13" TokenKey="PrimaryStringStartDelimiter" Pattern="&quot;" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<RegexPatternGroup TokenId="14" TokenKey="PrimaryStringEndDelimiter" Pattern="[\&quot;\n]" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
				<RegexPatternGroup TokenId="12" TokenKey="PrimaryStringText" Pattern="[^\&quot;\n]+" />
			</State>
			<!-- SingleLineComment state -->
			<State Id="3" Key="SingleLineComment" DefaultTokenId="15" DefaultTokenKey="SingleLineCommentText" DefaultClassificationTypeKey="Comment">
				<State.Scopes>
					<Scope>
						<Scope.StartPatternGroup>
							<ExplicitPatternGroup TokenId="16" TokenKey="SingleLineCommentStartDelimiter" Pattern="'" />
						</Scope.StartPatternGroup>
						<Scope.EndPatternGroup>
							<RegexPatternGroup TokenId="17" TokenKey="SingleLineCommentEndDelimiter" Pattern="\n" />
						</Scope.EndPatternGroup>
					</Scope>
				</State.Scopes>
				<RegexPatternGroup TokenId="15" TokenKey="SingleLineCommentText" Pattern="[^\n]+" />
			</State>
		</DynamicLexer>
	</LanguageDefinition.Lexer>
	<!-- Example text -->
	<LanguageDefinition.ExampleText>
    <![CDATA[' --------------------------------------------------------------------------------
GraphicsWindow.PenColor = "Red"
Turtle.Speed = 10
For N = 1 To 10
   Turtle.Turn(36)
   For I = 1 To 5
     Turtle.Move(54)
     Turtle.Turn(72)
   EndFor
EndFor
Turtle.Hide()
]]></LanguageDefinition.ExampleText>
</LanguageDefinition>